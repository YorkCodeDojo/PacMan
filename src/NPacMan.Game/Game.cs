using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace NPacMan.Game
{
    public class GameClock : IGameClock
    {
        private Action _action;
        private Timer _timer;

        public GameClock()
        {
            _timer = new System.Threading.Timer((state) => _action?.Invoke(), null, 0, 500);
        }
        public void Subscribe(Action action)
        {
            _action = action;
        }
    }

    public class Game
    {
        public int Score { get; private set; }

        private IGameBoard _board;
        private List<(int x, int y)> _collectedCoins;

        public Game(IGameClock gameClock, IGameBoard board)
        {
            gameClock.Subscribe(Tick);
            _board = board;
            PacMan = new PacMan(1, 3, Direction.Down);
            _collectedCoins = new List<(int x, int y)>();
        }


        public PacMan PacMan { get; private set; }
        public IReadOnlyCollection<(int x, int y)> Coins
            => _board.Coins.Except(_collectedCoins).ToList().AsReadOnly();
        public IReadOnlyCollection<(int x, int y)> Walls
            => _board.Walls;

        public int Width
            => _board.Width;

        public void ChangeDirection(Direction direction)
        {
            PacMan = new PacMan(PacMan.X, PacMan.Y, direction);
        }

        private void Tick()
        {
            var newPacMan = PacMan.Move();

            if (_board.Portals.TryGetValue((newPacMan.X, newPacMan.Y), out var portal))
            {
                newPacMan = new PacMan(portal.x, portal.y, newPacMan.Direction);
            }

            if (!_board.Walls.Contains((newPacMan.X, newPacMan.Y)))
            {
                PacMan = newPacMan;

                if (_board.Coins.Contains((newPacMan.X, newPacMan.Y)))
                {
                    _collectedCoins.Add((newPacMan.X, newPacMan.Y));
                    Score += 10;
                }
            }
        }
    }

    public interface IGameBoard
    {
        IReadOnlyCollection<(int x, int y)> Walls { get; }
        IReadOnlyCollection<(int x, int y)> Coins { get; }
        IReadOnlyDictionary<(int x, int y), (int x, int y)> Portals { get; }
        int Width { get; }
    }

    public class GameBoard : IGameBoard
    {
        public GameBoard()
        {
            Width = 28;

            Portals = new Dictionary<(int x, int y), (int x, int y)>()
            {
                [(-1, 14)] = (27, 14),
                [(-1, 15)] = (27, 15),
                [(28, 14)] = (0, 14),
                [(28, 15)] = (0, 15),
            };

            Walls = new[]
          {
                (0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(10,0),(11,0),(12,0),(13,0),(14,0),(15,0),(16,0),(17,0),(18,0),(19,0),(20,0),(21,0),(22,0),(23,0),(24,0),(25,0),(26,0),(27,0),
                (0,1),(13,1),(14,1),(27,1),
                (0,2),(2,2),(3,2),(4,2),(5,2),(7,2),(8,2),(9,2),(10,2),(11,2),(13,2),(14,2),(16,2),(17,2),(18,2),(19,2),(20,2),(22,2),(23,2),(24,2),(25,2),(27,2),
                (0,3),(2,3),(5,3),(7,3),(11,3),(13,3),(14,3),(16,3),(20,3),(22,3),(25,3),(27,3),
                (0,4),(2,4),(3,4),(4,4),(5,4),(7,4),(8,4),(9,4),(10,4),(11,4),(13,4),(14,4),(16,4),(17,4),(18,4),(19,4),(20,4),(22,4),(23,4),(24,4),(25,4),(27,4),
                (0,5),(27,5),
                (0,6),(2,6),(3,6),(4,6),(5,6),(7,6),(8,6),(10,6),(11,6),(12,6),(13,6),(14,6),(15,6),(16,6),(17,6),(19,6),(20,6),(22,6),(23,6),(24,6),(25,6),(27,6),
                (0,7),(2,7),(3,7),(4,7),(5,7),(7,7),(8,7),(10,7),(11,7),(12,7),(13,7),(14,7),(15,7),(16,7),(17,7),(19,7),(20,7),(22,7),(23,7),(24,7),(25,7),(27,7),
                (0,8),(7,8),(8,8),(13,8),(14,8),(19,8),(20,8),(27,8),
                (0,9),(1,9),(2,9),(3,9),(4,9),(5,9),(7,9),(8,9),(9,9),(10,9),(11,9),(13,9),(14,9),(16,9),(17,9),(18,9),(19,9),(20,9),(22,9),(23,9),(24,9),(25,9),(26,9),(27,9),
                (5,10),(7,10),(8,10),(9,10),(10,10),(11,10),(13,10),(14,10),(16,10),(17,10),(18,10),(19,10),(20,10),(22,10),
                (5,11),(7,11),(8,11),(19,11),(20,11),(22,11),
                (5,12),(7,12),(8,12),(19,12),(20,12),(22,12),
                (0,13),(1,13),(2,13),(3,13),(4,13),(5,13),(7,13),(8,13),(11,13),(12,13),(13,13),(14,13),(15,13),(16,13),(19,13),(20,13),(22,13),(23,13),(24,13),(25,13),(26,13),(27,13),
                (7,14),(8,14),(11,14),(16,14),(19,14),(20,14),
                (7,15),(8,15),(11,15),(16,15),(19,15),(20,15),
                (0,16),(1,16),(2,16),(3,16),(4,16),(5,16),(7,16),(8,16),(11,16),(12,16),(13,16),(14,16),(15,16),(16,16),(19,16),(20,16),(22,16),(23,16),(24,16),(25,16),(26,16),(27,16),
                (5,17),(7,17),(8,17),(19,17),(20,17),(22,17),
                (5,18),(7,18),(8,18),(19,18),(20,18),(22,18),
                (0,19),(1,19),(2,19),(3,19),(4,19),(5,19),(7,19),(8,19),(10,19),(11,19),(12,19),(13,19),(14,19),(15,19),(16,19),(17,19),(19,19),(20,19),(22,19),(23,19),(24,19),(25,19),(26,19),(27,19),
                (0,20),(13,20),(14,20),(27,20),
                (0,21),(2,21),(3,21),(4,21),(5,21),(7,21),(8,21),(9,21),(10,21),(11,21),(13,21),(14,21),(16,21),(17,21),(18,21),(19,21),(20,21),(22,21),(23,21),(24,21),(25,21),(27,21),
                (0,22),(2,22),(3,22),(4,22),(5,22),(7,22),(8,22),(9,22),(10,22),(11,22),(13,22),(14,22),(16,22),(17,22),(18,22),(19,22),(20,22),(22,22),(23,22),(24,22),(25,22),(27,22),
                (0,23),(4,23),(5,23),(22,23),(23,23),(27,23),
                (0,24),(1,24),(2,24),(4,24),(5,24),(7,24),(8,24),(10,24),(11,24),(12,24),(13,24),(14,24),(15,24),(16,24),(17,24),(19,24),(20,24),(22,24),(23,24),(25,24),(26,24),(27,24),
                (0,25),(1,25),(2,25),(4,25),(5,25),(7,25),(8,25),(10,25),(11,25),(12,25),(13,25),(14,25),(15,25),(16,25),(17,25),(19,25),(20,25),(22,25),(23,25),(25,25),(26,25),(27,25),
                (0,26),(7,26),(8,26),(13,26),(14,26),(19,26),(20,26),(27,26),
                (0,27),(2,27),(3,27),(4,27),(5,27),(6,27),(7,27),(8,27),(9,27),(10,27),(11,27),(13,27),(14,27),(16,27),(17,27),(18,27),(19,27),(20,27),(21,27),(22,27),(23,27),(24,27),(25,27),(27,27),
                (0,28),(2,28),(3,28),(4,28),(5,28),(6,28),(7,28),(8,28),(9,28),(10,28),(11,28),(13,28),(14,28),(16,28),(17,28),(18,28),(19,28),(20,28),(21,28),(22,28),(23,28),(24,28),(25,28),(27,28),
                (0,29),(27,29),
                (0,30),(1,30),(2,30),(3,30),(4,30),(5,30),(6,30),(7,30),(8,30),(9,30),(10,30),(11,30),(12,30),(13,30),(14,30),(15,30),(16,30),(17,30),(18,30),(19,30),(20,30),(21,30),(22,30),(23,30),(24,30),(25,30),(26,30),(27,30),

            };

            Coins = new[]
            {
(1,1),(2,1),(3,1),(4,1),(5,1),(6,1),(7,1),(8,1),(9,1),(10,1),(11,1),(12,1),(15,1),(16,1),(17,1),(18,1),(19,1),(20,1),(21,1),(22,1),(23,1),(24,1),(25,1),(26,1),
(1,2),(6,2),(12,2),(15,2),(21,2),(26,2),
(1,3),(6,3),(12,3),(15,3),(21,3),(26,3),
(1,4),(6,4),(12,4),(15,4),(21,4),(26,4),
(1,5),(2,5),(3,5),(4,5),(5,5),(6,5),(7,5),(8,5),(9,5),(10,5),(11,5),(12,5),(13,5),(14,5),(15,5),(16,5),(17,5),(18,5),(19,5),(20,5),(21,5),(22,5),(23,5),(24,5),(25,5),(26,5),
(1,6),(6,6),(9,6),(18,6),(21,6),(26,6),
(1,7),(6,7),(9,7),(18,7),(21,7),(26,7),
(1,8),(2,8),(3,8),(4,8),(5,8),(6,8),(9,8),(10,8),(11,8),(12,8),(15,8),(16,8),(17,8),(18,8),(21,8),(22,8),(23,8),(24,8),(25,8),(26,8),
(6,9),(21,9),
(6,10),(21,10),
(6,11),(21,11),
(6,12),(21,12),
(6,13),(21,13),
(6,14),(21,14),
(6,15),(21,15),
(6,16),(21,16),
(6,17),(21,17),
(6,18),(21,18),
(6,19),(21,19),
(1,20),(2,20),(3,20),(4,20),(5,20),(6,20),(7,20),(8,20),(9,20),(10,20),(11,20),(12,20),(15,20),(16,20),(17,20),(18,20),(19,20),(20,20),(21,20),(22,20),(23,20),(24,20),(25,20),(26,20),
(1,21),(6,21),(12,21),(15,21),(21,21),(26,21),
(1,22),(6,22),(12,22),(15,22),(21,22),(26,22),
(1,23),(2,23),(3,23),(6,23),(7,23),(8,23),(9,23),(10,23),(11,23),(12,23),(13,23),(14,23),(15,23),(16,23),(17,23),(18,23),(19,23),(20,23),(21,23),(24,23),(25,23),(26,23),
(3,24),(6,24),(9,24),(18,24),(21,24),(24,24),
(3,25),(6,25),(9,25),(18,25),(21,25),(24,25),
(1,26),(2,26),(3,26),(4,26),(5,26),(6,26),(9,26),(10,26),(11,26),(12,26),(15,26),(16,26),(17,26),(18,26),(21,26),(22,26),(23,26),(24,26),(25,26),(26,26),
(1,27),(12,27),(15,27),(26,27),
(1,28),(12,28),(15,28),(26,28),
(1,29),(2,29),(3,29),(4,29),(5,29),(6,29),(7,29),(8,29),(9,29),(10,29),(11,29),(12,29),(13,29),(14,29),(15,29),(16,29),(17,29),(18,29),(19,29),(20,29),(21,29),(22,29),(23,29),(24,29),(25,29),(26,29),
            };
        }

        public IReadOnlyCollection<(int x, int y)> Walls { get; }
        public IReadOnlyCollection<(int x, int y)> Coins { get; }
        public IReadOnlyDictionary<(int x, int y), (int x, int y)> Portals { get; }
        public int Width { get; }
    }

    public class PacMan
    {
        internal PacMan(int x, int y, Direction direction)
        {
            X = x;
            Y = y;
            Direction = direction;
        }

        public int X { get; }
        public int Y { get; }
        public Direction Direction { get; }

        public PacMan WithNewX(int newX) => new PacMan(newX, Y, Direction);
        public PacMan WithNewY(int newY) => new PacMan(X, newY, Direction);
        public PacMan WithNewDirection(Direction newDirection) => new PacMan(X, Y, newDirection);

        internal PacMan Move()
        {
            switch (Direction)
            {
                case Direction.Up:
                    return new PacMan(X, Y - 1, Direction);

                case Direction.Down:
                    return new PacMan(X, Y + 1, Direction);

                case Direction.Left:
                    return new PacMan(X - 1, Y, Direction);

                case Direction.Right:
                    return new PacMan(X + 1, Y, Direction);

                default:
                    throw new NotImplementedException();
            }
        }

        public void Deconstruct(out int x, out int y)
        {
            x = X;
            y = Y;
        }
    }
}
